{"version":3,"file":"static/js/600.f0147072.chunk.js","mappings":"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","sources":["app/core/apis/practice.js","app/core/apis/topic.js","app/pages/PracticePage/TabPane2.js","app/pages/PracticePage/PracticePage.js"],"sourcesContent":["import { _get, _post } from \"./apis\";\n\nexport const createPractice = (data) => {\n  return _post(`/api/v1/exam/create-random-session`, data);\n};\n\nexport const createRandomTopicSession = (data) => {\n  return _post(`/api/v1/exam/create-random-topic-session`, data);\n};\n\nexport const getCurrentRandomSession = (type) => {\n  return _get(`/api/v1/exam/current-random-session?type=${type}`);\n};\n","import { _get } from \"./apis\";\n\nexport const getAllTopic = () => {\n  return _get(\"/api/v1/topic/list\");\n};\n\nexport const getAllTopicFullList = () => {\n  return _get(\"/api/v1/topic/full-list\");\n};\n\nexport const getAllTopicFullListWithDeleted = () => {\n  return _get(\"/api/v1/topic/full-with-deleted\");\n};\n\n\n\n","import { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Button } from \"@themesberg/react-bootstrap\";\nimport {\n  Divider,\n  Form,\n  Input,\n  Modal,\n  Select,\n  Tabs,\n  Typography,\n  Spin,\n  Popconfirm,\n  Tooltip,\n} from \"antd\";\nimport { createRandomTopicSession } from \"app/core/apis/practice\";\nimport React, { useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport * as yup from \"yup\";\nimport \"./PracticePage.css\";\nconst { Text } = Typography;\nconst { Option } = Select;\nconst { TabPane } = Tabs;\nconst format = \"HH:mm:ss\";\n\nconst schema = yup\n  .object({\n    objectives: yup\n      .array()\n      .required()\n      .min(1, \"You need to choose 1 categories!!!\"),\n    numberOfQuestions: yup\n      .number()\n      .typeError(\"Must be a number\")\n      .min(20, \"Number of question must be greate than 20\")\n      .required(\"Please Enter Number of questions!\"),\n    timeLimited: yup\n      .number()\n      .typeError(\"Must be a number\")\n      .min(10, \"Limited Time > 60\")\n      .required(\"Please Enter Limited Time\"),\n  })\n  .required();\n\nconst TabPane2 = ({ allTopic }) => {\n  const history = useHistory();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const user = useSelector((state) => state.persist.user?.user);\n  const currentDoingExam = useSelector(\n    (state) => state?.exam?.currentDoingExam\n  );\n  const [form] = Form.useForm();\n  const {\n    control,\n    handleSubmit,\n    isSubmitting,\n    setValue,\n    reset,\n    getValues,\n    clearErrors,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      objectives: [],\n      numberOfQuestions: 20,\n      timeLimited: 900,\n    },\n  });\n\n  const showModalPracticeOneTopic = (item) => {\n    setValue(\"objectives\", [item._id]);\n    setIsModalVisible(true);\n  };\n\n  const showModalAllTopic = () => {\n    setValue(\n      \"objectives\",\n      allTopic?.map((item) => item._id)\n    );\n    setIsModalVisible(true);\n  };\n\n  const handleCancel = () => {\n    clearErrors();\n    reset();\n    setIsModalVisible(false);\n  };\n\n  const handlePractice = async (values) => {\n    try {\n      if (user === \"\") {\n        window.location = \"/login\";\n      }\n      const response = await createRandomTopicSession({\n        topics: values.objectives,\n        numberOfQuestions: values.numberOfQuestions,\n        time: values.timeLimited,\n      });\n      if (response?.data) {\n        history.push(`/exams/${response?.data?.exam?.exam}/attempt`);\n      } else {\n        alert(response.error);\n      }\n    } catch (error) {}\n  };\n\n  console.log(user);\n\n  return (\n    <>\n      <Modal\n        title=\"Practice Information\"\n        visible={isModalVisible}\n        onCancel={handleCancel}\n        footer={null}\n      >\n        <Form\n          className=\"form-practice\"\n          layout={\"vertical\"}\n          form={form}\n          initialValues={{ layout: \"vertical\" }}\n          onFinish={handleSubmit(handlePractice)}\n        >\n          <Form.Item label=\"*Pick Objectives:\">\n            <Controller\n              name=\"objectives\"\n              style={{ width: \"104%\" }}\n              control={control}\n              render={({ field }) => {\n                const props = {\n                  ...field,\n                };\n                delete props.value;\n                return (\n                  <>\n                    <Select\n                      status={errors.objectives && \"error\"}\n                      mode=\"multiple\"\n                      allowClear\n                      style={{\n                        width: \"100%\",\n                      }}\n                      {...props}\n                      showArrow\n                      placeholder=\"Please select\"\n                      value={getValues(\"objectives\")}\n                    >\n                      {allTopic?.map((item) => (\n                        <Option key={item._id}>{item.title}</Option>\n                      ))}\n                    </Select>\n                    {errors.objectives && (\n                      <span className=\"error-message\">\n                        {errors.objectives?.message}\n                      </span>\n                    )}\n                  </>\n                );\n              }}\n            />\n          </Form.Item>\n\n          <div className=\"d-flex justify-content-between form-practice-bottom\">\n            <Form.Item\n              label=\"*Number of question:\"\n              className=\"form-number-of-questions\"\n            >\n              <Controller\n                name=\"numberOfQuestions\"\n                control={control}\n                render={({ field }) => (\n                  <>\n                    <Input\n                      {...field}\n                      status={errors.numberOfQuestions && \"error\"}\n                    />\n                    {errors.numberOfQuestions && (\n                      <span className=\"error-message\">\n                        {errors.numberOfQuestions?.message}\n                      </span>\n                    )}\n                  </>\n                )}\n              />\n            </Form.Item>\n            <Form.Item label=\"*Time limited to do test:\" className=\"form-timer\">\n              <Controller\n                name=\"timeLimited\"\n                control={control}\n                render={({ field }) => (\n                  <>\n                    <Input {...field} status={errors.timeLimited && \"error\"} />\n                    {errors.timeLimited && (\n                      <span className=\"error-message\">\n                        {errors.timeLimited?.message}\n                      </span>\n                    )}\n                  </>\n                )}\n              />\n            </Form.Item>\n          </div>\n\n          <div className=\"form-item-button\">\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              className=\"mx-4\"\n              onClick={handleCancel}\n            >\n              Cancel\n            </Button>\n            {currentDoingExam?.exam !== undefined ? (\n              <Tooltip title=\"You need to complete the previous test before taking this test again\">\n                <Button disabled={isSubmitting} variant=\"primary\">\n                  Submit\n                </Button>\n              </Tooltip>\n            ) : user === \"\" ? (\n              <Popconfirm\n                title=\"You need to login to use this feature. Login now ?\"\n                onConfirm={() => (window.location = \"/login\")}\n                okText=\"Yes\"\n                cancelText=\"No\"\n              >\n                <Button\n                  disabled={\n                    isSubmitting || currentDoingExam?.exam !== undefined\n                  }\n                  type=\"submit\"\n                  variant=\"primary\"\n                >\n                  Submit\n                </Button>\n              </Popconfirm>\n            ) : (\n              <Button\n                disabled={isSubmitting || currentDoingExam?.exam !== undefined}\n                type=\"submit\"\n                variant=\"primary\"\n              >\n                Submit\n              </Button>\n            )}\n          </div>\n        </Form>\n      </Modal>\n      <Spin\n        className=\"sping-practice\"\n        spinning={allTopic.length === 0}\n        tip=\"Loading...\"\n        style={{ minHeight: \"400px\" }}\n      >\n        <div className=\"practice-with-each-section\">\n          {allTopic\n            ?.filter((t) => t?.status === \"public\")\n            ?.map((item, index) => (\n              <>\n                <PracticeItem\n                  key={`PracticeItem${item._id}`}\n                  item={item}\n                  index={index}\n                  showModalPracticeOneTopic={showModalPracticeOneTopic}\n                />\n                <Divider />\n              </>\n            ))}\n        </div>\n        {allTopic.length !== 0 && (\n          <div className=\"text-center mb-4 my-4\">\n            <Button\n              variant=\"primary\"\n              className=\"make-full\"\n              onClick={showModalAllTopic}\n            >\n              Make full practice\n            </Button>\n          </div>\n        )}\n      </Spin>\n    </>\n  );\n};\n\nconst PracticeItem = ({ item, index, showModalPracticeOneTopic }) => {\n  return (\n    <div className=\"practice-item\" id={`exams-item${index}`}>\n      <h4>{item?.title}</h4>\n      <div className=\"d-flex justify-content-between practice-item-top\">\n        <div className=\"practice-count-question\">\n          Questions (En):\n          {item?.questions.filter((item) => !item.isDeleted)?.length} questions\n        </div>\n        <div className=\"practice-count-question\">\n          {/* Problems (En):{item?.totalProblems} */}\n        </div>\n        <Button\n          variant=\"secondary\"\n          className=\"practice-now\"\n          onClick={() => showModalPracticeOneTopic(item)}\n        >\n          Practice\n        </Button>\n      </div>\n      <Divider />\n      {item?.sections?.map((item2, index) => (\n        <div key={item2?.id}>\n          <h5>\n            {index + 1}. {item2?.title}\n          </h5>\n          {/* <div\n            className=\"md-contents\"\n            dangerouslySetInnerHTML={{\n              __html: decodeURIComponent(\n                escape(window.atob(item?.description))\n              ),\n            }}\n          ></div> */}\n          <ul>\n            {item2?.lessons?.map((item3) => (\n              <li key={item3?.id}>{item3?.title}</li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TabPane2;\n","import { Col, Container } from \"@themesberg/react-bootstrap\";\nimport { Tabs } from \"antd\";\nimport { getAllTopicFullList } from \"app/core/apis/topic\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./PracticePage.css\";\nimport TabPane2 from \"./TabPane2\";\nconst { TabPane } = Tabs;\n\nconst PracticePage = () => {\n  const [allTopic, setAllTopic] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response1 = await getAllTopicFullList();\n        setAllTopic(response1?.data?.topic);\n      } catch (error) {}\n    })();\n  }, []);\n\n  const onChange = (key) => {\n    console.log(key);\n  };\n\n  return (\n    <Container className=\"d-flex container-card justify-content-center\">\n      <Col className=\"layout-container-top exam mx-3\">\n        <div>\n          <h1 className=\"text-center\">\n            Basic Information Technology Engineer Pass Question\n          </h1>\n          <div className=\"d-flex justify-content-center my-4\">\n            <img\n              src=\"https://www.fe-siken.com/img/doujoulogo.png\"\n              alt=\"doujou-logo\"\n            ></img>\n          </div>\n\n          <pre className=\"description-practice\">\n            \"Fundamental Information Technology Engineer Examination Past\n            Question Dojo\" is a collection of Web questions with complete\n            explanations that are randomly selected from the past questions\n            (2560 questions) of the Fundamental Information Technology Engineer\n            Examination.{`\\n`}\n            It is possible to work on past exercises by utilizing the gap time,\n            free of charge, compatible with PC / smartphone / tablet, and\n            management of learning history.{`\\n`}\n            Please use it as a test preparation.\"\n          </pre>\n        </div>\n        <Tabs \n        className=\"tab-practice\"\n        defaultActiveKey=\"1\" onChange={onChange} destroyInactiveTabPane>\n          <TabPane tab=\"Questions by specifying a field\" key=\"2\">\n            <TabPane2 allTopic={allTopic} />\n          </TabPane>\n        </Tabs>\n      </Col>\n    </Container>\n  );\n};\n\nexport default PracticePage;\n"],"names":["createPractice","data","_post","createRandomTopicSession","getCurrentRandomSession","type","_get","getAllTopic","getAllTopicFullList","getAllTopicFullListWithDeleted","Option","Typography","Select","schema","Tabs","yup","objectives","required","min","numberOfQuestions","typeError","timeLimited","PracticeItem","item","index","showModalPracticeOneTopic","className","id","title","questions","filter","isDeleted","length","Button","variant","onClick","sections","map","item2","lessons","item3","allTopic","history","useHistory","useState","isModalVisible","setIsModalVisible","user","useSelector","state","persist","currentDoingExam","exam","Form","form","useForm","resolver","yupResolver","defaultValues","control","handleSubmit","isSubmitting","setValue","reset","getValues","clearErrors","errors","formState","_id","handleCancel","handlePractice","values","window","location","topics","time","response","push","alert","error","console","log","visible","onCancel","footer","layout","initialValues","onFinish","label","name","style","width","render","field","props","value","status","mode","allowClear","showArrow","placeholder","message","undefined","disabled","onConfirm","okText","cancelText","spinning","tip","minHeight","t","TabPane","setAllTopic","useEffect","response1","topic","Container","Col","src","alt","defaultActiveKey","onChange","key","destroyInactiveTabPane","tab"],"sourceRoot":""}