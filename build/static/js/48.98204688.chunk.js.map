{"version":3,"file":"static/js/48.98204688.chunk.js","mappings":"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","sources":["app/hooks/useCountDown.js","app/components/CountDownTimer.js","app/components/Modal.js","app/pages/DoingQuiz/DetailQuestionsQuiz.js","app/pages/DoingQuiz/QuestionListQuiz.js","app/pages/DoingQuiz/DoingQuiz.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useCountDown = (targetDate) => {\n  const countDownDate = new Date(targetDate).getTime();\n\n  const [countDown, setCountDown] = useState(\n    countDownDate - new Date().getTime()\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCountDown(countDownDate - new Date().getTime());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [countDownDate]);\n\n  return getReturnValues(countDown);\n};\n\nconst getReturnValues = (countDown) => {\n  // calculate time left\n  const days = Math.floor(countDown / (1000 * 60 * 60 * 24));\n  const hours = Math.floor(\n    (countDown % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n  );\n  const minutes = Math.floor((countDown % (1000 * 60 * 60)) / (1000 * 60));\n  const seconds = Math.floor((countDown % (1000 * 60)) / 1000);\n\n  return [days, hours, minutes, seconds];\n};\n\nexport default useCountDown;","import useCountDown from \"app/hooks/useCountDown\";\nimport { useEffect } from \"react\";\n\nconst ExpiredNotice = () => {\n  return (\n    <div className=\"expired-notice\">\n      <span>Expired!!!</span>\n      <p>Please select a future date and time.</p>\n    </div>\n  );\n};\n\nconst ShowCounter = ({ days, hours, minutes, seconds }) => {\n  return (\n    <div className=\"show-counter d-flex\">\n      {/* <DateTimeDisplay value={days} type={\"Days\"} isDanger={days <= 3} />\n        <p>:</p> */}\n      <DateTimeDisplay value={hours} type={\"h\"} isDanger={false} />\n      <DateTimeDisplay value={minutes} type={\"m\"} isDanger={false} />\n      <DateTimeDisplay value={seconds} type={\"s\"} isDanger={false} />\n    </div>\n  );\n};\n\nconst CountDownTimer = ({ targetDate, onSubmitExam }) => {\n  const [days, hours, minutes, seconds] = useCountDown(targetDate);\n\n  if (days + hours + minutes + seconds < 0) {\n    (async () => {\n      await onSubmitExam();\n    })();\n    return <ExpiredNotice />;\n  } else {\n    return (\n      <ShowCounter\n        days={days}\n        hours={hours}\n        minutes={minutes}\n        seconds={seconds}\n      />\n    );\n  }\n};\n\nconst DateTimeDisplay = ({ value, type, isDanger }) => {\n  return (\n    <div className={isDanger ? \"countdown danger mx-1\" : \"countdown mx-1\"}>\n      <h2>{`${value}${type}`}</h2>\n    </div>\n  );\n};\n\nexport default CountDownTimer;\n","import { Modal, Button } from \"@themesberg/react-bootstrap\";\n\nexport const ModalConfirmBeforeSubmit = ({nameExam, onSubmit, warning, ...props}) => {\n    return (\n        <Modal\n          {...props}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              {nameExam}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <h4>Submit Exam Test</h4>\n            <p>\n             { warning}\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant='secondary' onClick={props.onHide}>Close</Button>\n            <Button variant='primary' onClick={onSubmit}>Submit</Button>\n          </Modal.Footer>\n        </Modal>\n      );\n}\n \n","import { Button, FormCheck } from \"@themesberg/react-bootstrap\";\nimport { ModalConfirmBeforeSubmit } from \"app/components/Modal\";\nimport { submitResult, updateAnswer } from \"app/core/apis/exam\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst DetailQuestion = ({\n  idExam,\n  item,\n  saveSelectedChoice,\n  data,\n  submissionArray,\n  setSubmissionArray,\n  selected,\n  setSelected,\n}) => {\n  const history = useHistory();\n  const [modalShow, setModalShow] = useState(false);\n  const [warning, setWarning] =\n    useState(` Please sure you answered all of questions. After submission, you can't change any your choice of questions\n    Are you sure to submit ?`);\n\n  const rejectSelectedChoice = async () => {\n    let index = [...submissionArray].findIndex(\n      (t) => t.question_id === item._id\n    );\n    if (index !== -1) {\n      const submmission = {\n        exam: idExam,\n        submissions: {\n          answers: null,\n          question_id: item._id,\n        },\n      };\n      try {\n        await updateAnswer(submmission);\n        setSelected(undefined);\n      } catch (error) {}\n\n      let tempQuestions = [...submissionArray];\n\n      tempQuestions.splice(index, 1);\n\n      setSubmissionArray(tempQuestions);\n    }\n  };\n\n  const onSubmitExam = async () => {\n    const submmission = {\n      exam: idExam,\n    };\n    try {\n      const res = await submitResult(submmission);\n      window.location = `/exams/${idExam}/attempt/${res.data.exam}/result`;\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    const temp = submissionArray?.find((t) => t.question_id === item._id);\n    if (temp !== undefined) {\n      setSelected(temp.answers);\n    } else {\n      setSelected(undefined);\n    }\n  }, [submissionArray, item]);\n\n  return (\n    <>\n      <ModalConfirmBeforeSubmit\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n        nameExam={data?.exam?.title}\n        onSubmit={onSubmitExam}\n        warning={warning}\n      />\n      <div className=\"count-question\">\n        <h1>Question {item.index}</h1>\n        <div\n          className=\"question-content\"\n          dangerouslySetInnerHTML={{\n            __html: item?.question,\n          }}\n        ></div>\n        <hr></hr>\n        <span>Choose the correct answer</span>\n        <ul className=\"choose-answer\">\n          {item?.choices?.map((item1, index1) => {\n            return (\n              <li key={item1._id}>\n                <FormCheck\n                  checked={selected === item1._id}\n                  onChange={() => setSelected(item1._id)}\n                  label={item1.label}\n                  name={`group${item._id}`}\n                  type=\"radio\"\n                  id={`inline-radio-${item1._id}`}\n                />\n              </li>\n            );\n          })}\n        </ul>\n        <hr></hr>\n        <a\n          onClick={async () => await rejectSelectedChoice()}\n          className=\"clear-answer\"\n        >\n          Clear Answer\n        </a>\n        <div className=\"question-action\">\n          <Button\n            onClick={async () => {\n              await saveSelectedChoice(selected);\n              history.push(\n                `/exams/${idExam}/attempt?question=${item.index - 1}`\n              );\n            }}\n            disabled={item.first}\n            className=\"btn-back\"\n          >\n            Go back to previous\n          </Button>\n          <Button\n            disabled={item.last}\n            onClick={async () => {\n              await saveSelectedChoice(selected);\n              history.push(\n                `/exams/${idExam}/attempt?question=${item.index + 1}`\n              );\n            }}\n          >\n            Save and next question\n          </Button>\n          <Button\n            onClick={async () => {\n              await saveSelectedChoice(selected);\n              if (\n                submissionArray?.length === data?.questions &&\n                submissionArray?.some((t) => t.answer === null)\n              ) {\n                setWarning(\n                  \"You has to finish all of question in this exam before submitting. Are you sure to keep submitting ?\"\n                );\n              }\n              setModalShow(true);\n            }}\n            className=\"btn-submit\"\n          >\n            Submit\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DetailQuestion;\n","import CountDownTimer from \"app/components/CountDownTimer\";\nimport React from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\n\nconst QuestionList = ({\n  data,\n  currentOrder,\n  statTime,\n  submissionArray,\n  selected,\n  idExam,\n  saveSelectedChoice,\n  onSubmitExam\n}) => {\n  \n\n  return (\n    <div className=\"sticky-sidebar\">\n      <div className=\"post-index hidden-sm-down\">\n        <div className=\"section-title-line\">\n          <h5 className=\"text-uppercase\">Question List</h5>\n          <CountDownTimer\n            onSubmitExam={onSubmitExam}\n            targetDate={\n              new Date(\n                new Date(statTime).getTime() + parseInt(data?.time) * 1000 - 1\n              )\n            }\n          />\n        </div>\n        <div className=\"status-answer d-flex\">\n          <span>Available</span>\n          <span className=\"answered\">Answered</span>\n          {/* <span className='not-yet'>Not yet</span> */}\n        </div>\n        <hr></hr>\n        <div className=\"question-container d-flex\">\n          {data?.questions?.map((item, index) => (\n            <QuestionItem\n              submissionArray={submissionArray}\n              key={item._id}\n              item={item}\n              index={index}\n              currentOrder={currentOrder}\n              selected={selected}\n              saveSelectedChoice={saveSelectedChoice}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst QuestionItem = ({\n  item,\n  index,\n  currentOrder,\n  submissionArray,\n  selected,\n  saveSelectedChoice,\n}) => {\n  let { idExam } = useParams();\n  const history = useHistory();\n  const temp = submissionArray?.find((t) => t.question_id === item._id);\n  let itemClassName = \"list-item\";\n  if (temp !== undefined) {\n    itemClassName += \" answered\";\n  }\n  if (index + 1 === currentOrder) {\n    itemClassName += \" selected\";\n  }\n\n  return (\n    <span\n      onClick={async () => {\n        await saveSelectedChoice(selected);\n        history.push(`/exams/${idExam}/attempt?question=${index + 1}`);\n      }}\n      className={itemClassName}\n    >\n      <span className=\"text text-test\">{index + 1}</span>\n    </span>\n  );\n};\n\nexport default QuestionList;\n","import { Col, Container } from \"@themesberg/react-bootstrap\";\nimport { Spin } from \"antd\";\nimport { getCurrentExam, submitResult, updateAnswer } from \"app/core/apis/exam\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useParams, useHistory } from \"react-router-dom\";\nimport DetailQuestion from \"./DetailQuestionsQuiz\";\nimport QuestionList from \"./QuestionListQuiz\";\nimport { useRef } from \"react\";\n\nconst DoingQuiz = () => {\n  const [data, setData] = useState(\"\");\n  const [questionShow, setQuestionShow] = useState(\"\");\n  const history = useHistory();\n  const [submissionArray, setSubmissionArray] = useState([]);\n  const [statTime, setStartTime] = useState(\"\");\n  const [selected, setSelected] = useState(undefined);\n  const location = useLocation();\n  const [isTimeOut, setIsTimeOut] = useState(false);\n  const isFirstCallSubmit = useRef(false);\n  let { idExam, practice } = useParams();\n\n  const currentOrder =\n    new URLSearchParams(location.search).get(\"question\") === null\n      ? 1\n      : parseInt(new URLSearchParams(location.search).get(\"question\"));\n\n  const saveSelectedChoice = async (selectedChoice) => {\n    if (selectedChoice !== undefined) {\n      const submmission = {\n        exam: idExam,\n        submissions: {\n          answers: selectedChoice,\n          question_id: questionShow._id,\n        },\n      };\n\n      try {\n        await updateAnswer(submmission);\n        let temp = [...submissionArray];\n        temp.push({\n          answers: selectedChoice,\n          question_id: questionShow._id,\n        });\n        setSubmissionArray(temp);\n      } catch (error) {}\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        let response = \"\";\n        // if (practice === 0) {\n        //   response = await getCurrentExam(idExam);\n        // } else {\n        //   response = await getCurrentRandomSession();\n        // }\n        response = await getCurrentExam(idExam);\n        setData({\n          ...response?.data?.exam.exam,\n          questions: response?.data?.exam.exam?.questions.map((item) => ({\n            ...item,\n            question: decodeURIComponent(escape(window.atob(item?.question))),\n            explanation: decodeURIComponent(\n              escape(window.atob(item?.explanation))\n            ),\n          })),\n        });\n        setSubmissionArray(response?.data?.exam.submissions);\n        setStartTime(response?.data?.exam?.createdAt);\n      } catch (error) {}\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (data !== \"\") {\n      if (currentOrder === null) {\n        //get index = 0 or question 1\n        setQuestionShow({\n          ...data.questions[0],\n          first: true,\n          index: 0,\n          last: false,\n        });\n      } else {\n        //get based on valueQuestion\n        setQuestionShow({\n          ...data.questions[currentOrder - 1],\n          first: false,\n          index: currentOrder,\n          last: currentOrder === data.questions.length,\n        });\n      }\n    }\n  }, [data, currentOrder]);\n\n  const onSubmitExam = async () => {\n    setIsTimeOut(true);\n    const submmission = {\n      exam: idExam,\n    };\n    try {\n      if (isFirstCallSubmit.current === false) {\n        isFirstCallSubmit.current = true;\n        const res = await submitResult(submmission);\n        history.push(`/exams/${idExam}/attempt/${res.data.exam}/result`);\n      }\n    } catch (error) {}\n  };\n\n  return (\n    <>\n      <Spin\n        className=\"spin-doing-quiz\"\n        style={{ maxHeight: \"none\" }}\n        spinning={isTimeOut}\n        tip=\"Loading...\"\n      >\n        <Container className=\"d-flex container-card\">\n          <Col className=\"layout-container-body quiz\">\n            <QuestionList\n              submissionArray={submissionArray}\n              saveSelectedChoice={saveSelectedChoice}\n              selected={selected}\n              data={data}\n              idExam={idExam}\n              currentOrder={currentOrder}\n              statTime={statTime}\n              onSubmitExam={onSubmitExam}\n            />\n          </Col>\n          <Col className=\"layout-container-top quiz\">\n            <DetailQuestion\n              idExam={idExam}\n              item={questionShow}\n              saveSelectedChoice={saveSelectedChoice}\n              data={data}\n              submissionArray={submissionArray}\n              setSubmissionArray={setSubmissionArray}\n              selected={selected}\n              setSelected={setSelected}\n            />\n          </Col>\n        </Container>\n      </Spin>\n    </>\n  );\n};\n\nexport default DoingQuiz;\n"],"names":["getReturnValues","countDown","Math","floor","targetDate","countDownDate","Date","getTime","useState","setCountDown","useEffect","interval","setInterval","clearInterval","ExpiredNotice","className","ShowCounter","days","hours","minutes","seconds","DateTimeDisplay","value","type","isDanger","onSubmitExam","useCountDown","ModalConfirmBeforeSubmit","nameExam","onSubmit","warning","props","size","centered","closeButton","id","variant","onClick","onHide","idExam","item","saveSelectedChoice","data","submissionArray","setSubmissionArray","selected","setSelected","history","useHistory","modalShow","setModalShow","setWarning","rejectSelectedChoice","index","findIndex","t","question_id","_id","submmission","exam","submissions","answers","updateAnswer","undefined","tempQuestions","splice","submitResult","res","window","location","temp","find","Modal","show","title","dangerouslySetInnerHTML","__html","question","choices","map","item1","index1","FormCheck","checked","onChange","label","name","Button","push","disabled","first","last","length","questions","some","answer","QuestionItem","currentOrder","useParams","itemClassName","statTime","CountDownTimer","parseInt","time","setData","questionShow","setQuestionShow","setStartTime","useLocation","isTimeOut","setIsTimeOut","isFirstCallSubmit","useRef","practice","URLSearchParams","search","get","selectedChoice","response","getCurrentExam","decodeURIComponent","escape","atob","explanation","createdAt","current","style","maxHeight","spinning","tip","Container","Col"],"sourceRoot":""}