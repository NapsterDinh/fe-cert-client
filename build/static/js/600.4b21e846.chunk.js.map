{"version":3,"file":"static/js/600.4b21e846.chunk.js","mappings":"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","sources":["app/core/apis/practice.js","app/core/apis/topic.js","app/pages/PracticePage/TabPane2.js","app/pages/PracticePage/PracticePage.js"],"sourcesContent":["import { _get, _post } from \"./apis\";\r\n\r\nexport const createPractice = (data) => {\r\n  return _post(`/api/v1/exam/create-random-session`, data);\r\n};\r\n\r\nexport const createRandomTopicSession = (data) => {\r\n  return _post(`/api/v1/exam/create-random-topic-session`, data);\r\n};\r\n\r\nexport const getCurrentRandomSession = (type) => {\r\n  return _get(`/api/v1/exam/current-random-session?type=${type}`);\r\n};\r\n","import { _get } from \"./apis\";\r\n\r\nexport const getAllTopic = () => {\r\n  return _get(\"/api/v1/topic/list\");\r\n};\r\n\r\nexport const getAllTopicFullList = () => {\r\n  return _get(\"/api/v1/topic/full-list\");\r\n};\r\n\r\nexport const getAllTopicFullListWithDeleted = () => {\r\n  return _get(\"/api/v1/topic/full-with-deleted\");\r\n};\r\n\r\n\r\n\r\n","import { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { Button } from \"@themesberg/react-bootstrap\";\r\nimport {\r\n  Divider,\r\n  Form,\r\n  Input,\r\n  Modal,\r\n  Select,\r\n  Tabs,\r\n  Typography,\r\n  Spin,\r\n  Popconfirm,\r\n  Tooltip,\r\n} from \"antd\";\r\nimport { createRandomTopicSession } from \"app/core/apis/practice\";\r\nimport React, { useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport * as yup from \"yup\";\r\nimport \"./PracticePage.css\";\r\nconst { Text } = Typography;\r\nconst { Option } = Select;\r\nconst { TabPane } = Tabs;\r\nconst format = \"HH:mm:ss\";\r\n\r\nconst schema = yup\r\n  .object({\r\n    objectives: yup\r\n      .array()\r\n      .required()\r\n      .min(1, \"You need to choose 1 categories!!!\"),\r\n    numberOfQuestions: yup\r\n      .number()\r\n      .typeError(\"Must be a number\")\r\n      .min(20, \"Number of question must be greate than 20\")\r\n      .required(\"Please Enter Number of questions!\"),\r\n    timeLimited: yup\r\n      .number()\r\n      .typeError(\"Must be a number\")\r\n      .min(10, \"Limited Time > 60\")\r\n      .required(\"Please Enter Limited Time\"),\r\n  })\r\n  .required();\r\n\r\nconst TabPane2 = ({ allTopic }) => {\r\n  const history = useHistory();\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const user = useSelector((state) => state.persist.user?.user);\r\n  const currentDoingExam = useSelector(\r\n    (state) => state?.exam?.currentDoingExam\r\n  );\r\n  const [form] = Form.useForm();\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    isSubmitting,\r\n    setValue,\r\n    reset,\r\n    getValues,\r\n    setError,\r\n    clearErrors,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n    defaultValues: {\r\n      objectives: [],\r\n      numberOfQuestions: 20,\r\n      timeLimited: 900,\r\n    },\r\n  });\r\n\r\n  const showModalPracticeOneTopic = (item) => {\r\n    setValue(\"objectives\", [item._id]);\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const showModalAllTopic = () => {\r\n    setValue(\r\n      \"objectives\",\r\n      allTopic?.map((item) => item._id)\r\n    );\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    clearErrors();\r\n    reset();\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handlePractice = async (values) => {\r\n    try {\r\n      if (user === \"\") {\r\n        window.location = \"/login\";\r\n      }\r\n\r\n      if (\r\n        values?.numberOfQuestions >\r\n        allTopic.find((t) => t?._id === values.objectives[0]).questions.length\r\n      ) {\r\n        setError(\"numberOfQuestions\", {\r\n          message: \"Number of question is more than number of valid questions\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      const response = await createRandomTopicSession({\r\n        topics: values.objectives,\r\n        numberOfQuestions: values.numberOfQuestions,\r\n        time: values.timeLimited,\r\n      });\r\n      if (response?.data) {\r\n        history.push(`/exams/${response?.data?.exam?.exam}/attempt`);\r\n      } else {\r\n        alert(response.error);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        title=\"Practice Information\"\r\n        visible={isModalVisible}\r\n        onCancel={handleCancel}\r\n        footer={null}\r\n      >\r\n        <Form\r\n          className=\"form-practice\"\r\n          layout={\"vertical\"}\r\n          form={form}\r\n          initialValues={{ layout: \"vertical\" }}\r\n          onFinish={handleSubmit(handlePractice)}\r\n        >\r\n          <Form.Item label=\"*Pick Objectives:\">\r\n            <Controller\r\n              name=\"objectives\"\r\n              style={{ width: \"104%\" }}\r\n              control={control}\r\n              render={({ field }) => {\r\n                const props = {\r\n                  ...field,\r\n                };\r\n                delete props.value;\r\n                return (\r\n                  <>\r\n                    <Select\r\n                      status={errors.objectives && \"error\"}\r\n                      mode=\"multiple\"\r\n                      allowClear\r\n                      style={{\r\n                        width: \"100%\",\r\n                      }}\r\n                      {...props}\r\n                      showArrow\r\n                      placeholder=\"Please select\"\r\n                      value={getValues(\"objectives\")}\r\n                    >\r\n                      {allTopic?.map((item) => (\r\n                        <Option key={item._id}>{item.title}</Option>\r\n                      ))}\r\n                    </Select>\r\n                    {errors.objectives && (\r\n                      <span className=\"error-message\">\r\n                        {errors.objectives?.message}\r\n                      </span>\r\n                    )}\r\n                  </>\r\n                );\r\n              }}\r\n            />\r\n          </Form.Item>\r\n\r\n          <div className=\"d-flex justify-content-between form-practice-bottom\">\r\n            <Form.Item\r\n              label=\"*Number of question:\"\r\n              className=\"form-number-of-questions\"\r\n            >\r\n              <Controller\r\n                name=\"numberOfQuestions\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <>\r\n                    <Input\r\n                      {...field}\r\n                      status={errors.numberOfQuestions && \"error\"}\r\n                    />\r\n                    {errors.numberOfQuestions && (\r\n                      <span className=\"error-message\">\r\n                        {errors.numberOfQuestions?.message}\r\n                      </span>\r\n                    )}\r\n                  </>\r\n                )}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item label=\"*Time limited to do test:\" className=\"form-timer\">\r\n              <Controller\r\n                name=\"timeLimited\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <>\r\n                    <Input {...field} status={errors.timeLimited && \"error\"} />\r\n                    {errors.timeLimited && (\r\n                      <span className=\"error-message\">\r\n                        {errors.timeLimited?.message}\r\n                      </span>\r\n                    )}\r\n                  </>\r\n                )}\r\n              />\r\n            </Form.Item>\r\n          </div>\r\n\r\n          <div className=\"form-item-button\">\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"secondary\"\r\n              className=\"mx-4\"\r\n              onClick={handleCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            {currentDoingExam?.exam !== undefined ? (\r\n              <Tooltip title=\"You need to complete the previous test before taking this test again\">\r\n                <Button disabled={isSubmitting} variant=\"primary\">\r\n                  Submit\r\n                </Button>\r\n              </Tooltip>\r\n            ) : user === \"\" ? (\r\n              <Popconfirm\r\n                title=\"You need to login to use this feature. Login now ?\"\r\n                onConfirm={() => (window.location = \"/login\")}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n              >\r\n                <Button\r\n                  disabled={\r\n                    isSubmitting || currentDoingExam?.exam !== undefined\r\n                  }\r\n                  type=\"submit\"\r\n                  variant=\"primary\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Popconfirm>\r\n            ) : (\r\n              <Button\r\n                disabled={isSubmitting || currentDoingExam?.exam !== undefined}\r\n                type=\"submit\"\r\n                variant=\"primary\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Form>\r\n      </Modal>\r\n      <Spin\r\n        className=\"sping-practice\"\r\n        spinning={allTopic.length === 0}\r\n        tip=\"Loading...\"\r\n        style={{ minHeight: \"400px\" }}\r\n      >\r\n        <div className=\"practice-with-each-section\">\r\n          {allTopic\r\n            ?.filter((t) => t?.status === \"public\")\r\n            ?.map((item, index) => (\r\n              <>\r\n                <PracticeItem\r\n                  key={`PracticeItem${item._id}`}\r\n                  item={item}\r\n                  index={index}\r\n                  showModalPracticeOneTopic={showModalPracticeOneTopic}\r\n                />\r\n                <Divider />\r\n              </>\r\n            ))}\r\n        </div>\r\n        {allTopic.length !== 0 && (\r\n          <div className=\"text-center mb-4 my-4\">\r\n            <Button\r\n              variant=\"primary\"\r\n              className=\"make-full\"\r\n              onClick={showModalAllTopic}\r\n            >\r\n              Make full practice\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </Spin>\r\n    </>\r\n  );\r\n};\r\n\r\nconst PracticeItem = ({ item, index, showModalPracticeOneTopic }) => {\r\n  return (\r\n    <div className=\"practice-item\" id={`exams-item${index}`}>\r\n      <h4>{item?.title}</h4>\r\n      <div className=\"d-flex justify-content-between practice-item-top\">\r\n        <div className=\"practice-count-question\">\r\n          Questions (En):\r\n          {item?.questions.filter((item) => !item.isDeleted)?.length} questions\r\n        </div>\r\n        <div className=\"practice-count-question\">\r\n          {/* Problems (En):{item?.totalProblems} */}\r\n        </div>\r\n        <Button\r\n          variant=\"secondary\"\r\n          className=\"practice-now\"\r\n          onClick={() => showModalPracticeOneTopic(item)}\r\n        >\r\n          Practice\r\n        </Button>\r\n      </div>\r\n      <Divider />\r\n      {item?.sections?.map((item2, index) => (\r\n        <div key={item2?.id}>\r\n          <h5>\r\n            {index + 1}. {item2?.title}\r\n          </h5>\r\n          {/* <div\r\n            className=\"md-contents\"\r\n            dangerouslySetInnerHTML={{\r\n              __html: decodeURIComponent(\r\n                escape(window.atob(item?.description))\r\n              ),\r\n            }}\r\n          ></div> */}\r\n          <ul>\r\n            {item2?.lessons?.map((item3) => (\r\n              <li key={item3?.id}>{item3?.title}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabPane2;\r\n","import { Col, Container } from \"@themesberg/react-bootstrap\";\r\nimport { Tabs } from \"antd\";\r\nimport { getAllTopicFullList } from \"app/core/apis/topic\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./PracticePage.css\";\r\nimport TabPane2 from \"./TabPane2\";\r\nconst { TabPane } = Tabs;\r\n\r\nconst PracticePage = () => {\r\n  const [allTopic, setAllTopic] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const response1 = await getAllTopicFullList();\r\n        setAllTopic(response1?.data?.topic);\r\n      } catch (error) {}\r\n    })();\r\n  }, []);\r\n\r\n  const onChange = (key) => {\r\n    console.log(key);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"d-flex container-card justify-content-center\">\r\n      <Col className=\"layout-container-top exam mx-3\">\r\n        <div>\r\n          <h1 className=\"text-center\">\r\n            Basic Information Technology Engineer Pass Question\r\n          </h1>\r\n          <div className=\"d-flex justify-content-center my-4\">\r\n            <img\r\n              src=\"https://www.fe-siken.com/img/doujoulogo.png\"\r\n              alt=\"doujou-logo\"\r\n            ></img>\r\n          </div>\r\n\r\n          <pre className=\"description-practice\">\r\n            \"Fundamental Information Technology Engineer Examination Past\r\n            Question Dojo\" is a collection of Web questions with complete\r\n            explanations that are randomly selected from the past questions\r\n            (2560 questions) of the Fundamental Information Technology Engineer\r\n            Examination.{`\\n`}\r\n            It is possible to work on past exercises by utilizing the gap time,\r\n            free of charge, compatible with PC / smartphone / tablet, and\r\n            management of learning history.{`\\n`}\r\n            Please use it as a test preparation.\"\r\n          </pre>\r\n        </div>\r\n        <Tabs \r\n        className=\"tab-practice\"\r\n        defaultActiveKey=\"1\" onChange={onChange} destroyInactiveTabPane>\r\n          <TabPane tab=\"Questions by specifying a field\" key=\"2\">\r\n            <TabPane2 allTopic={allTopic} />\r\n          </TabPane>\r\n        </Tabs>\r\n      </Col>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PracticePage;\r\n"],"names":["createPractice","data","_post","createRandomTopicSession","getCurrentRandomSession","type","_get","getAllTopic","getAllTopicFullList","getAllTopicFullListWithDeleted","Option","Typography","Select","schema","Tabs","yup","objectives","required","min","numberOfQuestions","typeError","timeLimited","PracticeItem","item","index","showModalPracticeOneTopic","className","id","title","questions","filter","isDeleted","length","Button","variant","onClick","sections","map","item2","lessons","item3","allTopic","history","useHistory","useState","isModalVisible","setIsModalVisible","user","useSelector","state","persist","currentDoingExam","exam","Form","form","useForm","resolver","yupResolver","defaultValues","control","handleSubmit","isSubmitting","setValue","reset","getValues","setError","clearErrors","errors","formState","_id","handleCancel","handlePractice","values","window","location","find","t","message","topics","time","response","push","alert","error","visible","onCancel","footer","layout","initialValues","onFinish","label","name","style","width","render","field","props","value","status","mode","allowClear","showArrow","placeholder","undefined","disabled","onConfirm","okText","cancelText","spinning","tip","minHeight","TabPane","setAllTopic","useEffect","response1","topic","Container","Col","src","alt","defaultActiveKey","onChange","key","console","log","destroyInactiveTabPane","tab"],"sourceRoot":""}