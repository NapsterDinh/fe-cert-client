{"version":3,"file":"static/js/822.cc38b0c8.chunk.js","mappings":"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","sources":["app/components/Chart/Chart.js","app/components/Widgets.js","app/data/teamMembers.js","app/utils/ArrayUtils.js"],"sourcesContent":["import { faTruckMonster } from \"@fortawesome/free-solid-svg-icons\";\nimport ReactApexChart from \"react-apexcharts\";\n\nconst Chart = ({ series, labels, width }) => {\n  return (\n    <div>\n      <div className=\"chart-wrap\">\n        <div id=\"chart\">\n          <ReactApexChart\n            className=\"chart-container\"\n            options={{\n              chart: {\n                width: width,\n                type: \"donut\",\n              },\n              labels: labels,\n              dataLabels: {\n                enabled: faTruckMonster,\n              },\n              responsive: [\n                {\n                  breakpoint: 480,\n                  options: {\n                    chart: {\n                      width: 200,\n                    },\n                    legend: {\n                      show: true,\n                    },\n                  },\n                },\n              ],\n              legend: {\n                position: \"right\",\n                offsetY: 0,\n                height: 230,\n              },\n            }}\n            series={series}\n            type=\"donut\"\n            width={width}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const LineChart = ({ series, title, xaxis, yaxis, annotations }) => {\n  return (\n    <div id=\"chart\">\n      <ReactApexChart\n        options={{\n          chart: {\n            height: 350,\n            type: \"line\",\n            dropShadow: {\n              enabled: true,\n              color: \"#000\",\n              top: 18,\n              left: 7,\n              blur: 10,\n              opacity: 0.2,\n            },\n            toolbar: {\n              show: true,\n              autoSelected: \"zoom\",\n            },\n          },\n          colors: [\"#77B6EA\", \"#545454\"],\n          dataLabels: {\n            enabled: false,\n          },\n          stroke: {\n            curve: \"smooth\",\n          },\n          title: {\n            text: title,\n            align: \"left\",\n          },\n          grid: {\n            borderColor: \"#e7e7e7\",\n            row: {\n              colors: [\"#f3f3f3\", \"transparent\"], // takes an array which will be repeated on columns\n              opacity: 0.5,\n            },\n          },\n          annotations: annotations,\n          markers: {\n            size: 1,\n          },\n          xaxis: xaxis,\n          yaxis: yaxis,\n          legend: {\n            position: \"top\",\n            horizontalAlign: \"right\",\n            floating: true,\n            offsetY: -25,\n            offsetX: -5,\n          },\n        }}\n        series={series}\n        type=\"line\"\n        height={350}\n      />\n    </div>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faAngleDown,\n  faAngleUp,\n  faChartArea,\n  faChartBar,\n  faChartLine,\n  faFlagUsa,\n  faFolderOpen,\n  faGlobeEurope,\n  faPaperclip,\n  faUserPlus,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  faAngular,\n  faBootstrap,\n  faReact,\n  faVuejs,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport {\n  Col,\n  Row,\n  Card,\n  Image,\n  Button,\n  ListGroup,\n  ProgressBar,\n} from \"@themesberg/react-bootstrap\";\nimport { Progress as ProgressAntd } from \"antd\";\nimport {\n  CircleChart,\n  BarChart,\n  SalesValueChart,\n  SalesValueChartphone,\n} from \"./Charts\";\n\nimport Profile1 from \"../assets/img/team/profile-picture-1.jpg\";\nimport ProfileCover from \"../assets/img/profile-cover.jpg\";\n\nimport teamMembers from \"../data/teamMembers\";\n\nexport const ProfileCardWidget = () => {\n  return (\n    <Card border=\"light\" className=\"text-center p-0 mb-4\">\n      <div\n        style={{ backgroundImage: `url(${ProfileCover})` }}\n        className=\"profile-cover rounded-top\"\n      />\n      <Card.Body className=\"pb-5\">\n        <Card.Img\n          src={Profile1}\n          alt=\"Neil Portrait\"\n          className=\"user-avatar large-avatar rounded-circle mx-auto mt-n7 mb-4\"\n        />\n        <Card.Title>Neil Sims</Card.Title>\n        <Card.Subtitle className=\"fw-normal\">\n          Senior Software Engineer\n        </Card.Subtitle>\n        <Card.Text className=\"text-gray mb-4\">New York, USA</Card.Text>\n\n        <Button variant=\"primary\" size=\"sm\" className=\"me-2\">\n          <FontAwesomeIcon icon={faUserPlus} className=\"me-1\" /> Connect\n        </Button>\n        <Button variant=\"secondary\" size=\"sm\">\n          Send Message\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const ChoosePhotoWidget = (props) => {\n  const { title, photo } = props;\n\n  return (\n    <Card border=\"light\" className=\"bg-white shadow-sm mb-4\">\n      <Card.Body>\n        <h5 className=\"mb-4\">{title}</h5>\n        <div className=\"d-xl-flex align-items-center\">\n          <div className=\"user-avatar xl-avatar\">\n            <Image fluid rounded src={photo} />\n          </div>\n          <div className=\"file-field\">\n            <div className=\"d-flex justify-content-xl-center ms-xl-3\">\n              <div className=\"d-flex\">\n                <span className=\"icon icon-md\">\n                  <FontAwesomeIcon icon={faPaperclip} className=\"me-3\" />\n                </span>\n                <input type=\"file\" />\n                <div className=\"d-md-block text-start\">\n                  <div className=\"fw-normal text-dark mb-1\">Choose Image</div>\n                  <div className=\"text-gray small\">\n                    JPG, GIF or PNG. Max size of 800K\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const CounterWidget = (props) => {\n  const { icon, iconColor, category, title, period, percentage } = props;\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\n\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Body>\n        <Row className=\"d-block d-xl-flex align-items-center\">\n          <Col\n            xl={5}\n            className=\"text-xl-center d-flex align-items-center justify-content-xl-center mb-3 mb-xl-0\"\n          >\n            <div\n              className={`icon icon-shape icon-md icon-${iconColor} rounded me-4 me-sm-0`}\n            >\n              <FontAwesomeIcon icon={icon} />\n            </div>\n            <div className=\"d-sm-none\">\n              <h5>{category}</h5>\n              <h3 className=\"mb-1\">{title}</h3>\n            </div>\n          </Col>\n          <Col xs={12} xl={7} className=\"px-xl-0\">\n            <div className=\"d-none d-sm-block\">\n              <h5>{category}</h5>\n              <h3 className=\"mb-1\">{title}</h3>\n            </div>\n            {/* <small>\n              {period}, <FontAwesomeIcon icon={faGlobeEurope} size=\"xs\" />{\" \"}\n              WorldWide\n            </small> */}\n            {/* <div className=\"small mt-2\">\n              <FontAwesomeIcon\n                icon={percentageIcon}\n                className={`${percentageColor} me-1`}\n              />\n              <span className={`${percentageColor} fw-bold`}>\n                {percentage}%\n              </span>{\" \"}\n              Since last month\n            </div> */}\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const CircleChartWidget = (props) => {\n  const { title, data = [] } = props;\n  const series = data.map((d) => ({\n    value: d.value,\n    meta: d.label,\n  }));\n\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Body>\n        <Row className=\"d-block d-xl-flex align-items-center\">\n          <Col\n            xs={12}\n            xl={5}\n            className=\"text-xl-center d-flex align-items-center justify-content-xl-center mb-3 mb-xl-0\"\n          >\n            <CircleChart series={series} />\n          </Col>\n          <Col xs={12} xl={7} className=\"px-xl-0\">\n            <h5 className=\"mb-3\">{title}</h5>\n\n            {data.map((d) => (\n              <div>\n                {/* <div style={{ width: '30px', height: '30px', backgroundColor: d.color}}></div> */}\n                <h6\n                  key={`circle-element-${d.id}`}\n                  className=\"fw-normal text-gray\"\n                >\n                  <FontAwesomeIcon\n                    icon={d.icon}\n                    className={`icon icon-xs text-${d.color} w-20 me-1`}\n                  />\n                  {` ${d.label} `}\n                  {`${d.value}%`}\n                </h6>\n              </div>\n            ))}\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const BarChartWidget = (props) => {\n  const { title, value, percentage, data = [] } = props;\n  const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n  const series = data.map((d) => d.value);\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\n\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Body className=\"d-flex flex-row align-items-center flex-0 border-bottom\">\n        <div className=\"d-block\">\n          <h6 className=\"fw-normal text-gray mb-2\">{title}</h6>\n          <h3>{value}</h3>\n          <small className=\"mt-2\">\n            <FontAwesomeIcon\n              icon={percentageIcon}\n              className={`${percentageColor} me-1`}\n            />\n            <span className={`${percentageColor} fw-bold`}>{percentage}%</span>\n          </small>\n        </div>\n        <div className=\"d-block ms-auto\">\n          {data.map((d) => (\n            <div\n              key={`bar-element-${d.id}`}\n              className=\"d-flex align-items-center text-end mb-2\"\n            >\n              <span className={`shape-xs rounded-circle bg-${d.color} me-2`} />\n              <small className=\"fw-normal\">{d.label}</small>\n            </div>\n          ))}\n        </div>\n      </Card.Body>\n      <Card.Body className=\"p-2\">\n        <BarChart labels={labels} series={series} />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const TeamMembersWidget = () => {\n  const TeamMember = (props) => {\n    const { name, statusKey, image, icon, btnText } = props;\n    const status = {\n      online: { color: \"success\", label: \"Online\" },\n      inMeeting: { color: \"warning\", label: \"In a meeting\" },\n      offline: { color: \"danger\", label: \"Offline\" },\n    };\n\n    const statusColor = status[statusKey] ? status[statusKey].color : \"danger\",\n      statusLabel = status[statusKey] ? status[statusKey].label : \"Offline\";\n\n    return (\n      <ListGroup.Item className=\"px-0\">\n        <Row className=\"align-items-center\">\n          <Col className=\"col-auto\">\n            <a href=\"#top\" className=\"user-avatar\">\n              <Image src={image} className=\"rounded-circle\" />\n            </a>\n          </Col>\n          <Col className=\"ms--2\">\n            <h4 className=\"h6 mb-0\">\n              <a href=\"#!\">{name}</a>\n            </h4>\n            <span className={`text-${statusColor}`}>● </span>\n            <small>{statusLabel}</small>\n          </Col>\n          <Col className=\"col-auto\">\n            <Button variant=\"tertiary\" size=\"sm\">\n              <FontAwesomeIcon icon={icon} className=\"me-1\" /> {btnText}\n            </Button>\n          </Col>\n        </Row>\n      </ListGroup.Item>\n    );\n  };\n\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Header className=\"border-bottom border-light d-flex justify-content-between\">\n        <h5 className=\"mb-0\">Team members</h5>\n        <Button variant=\"secondary\" size=\"sm\">\n          See all\n        </Button>\n      </Card.Header>\n      <Card.Body>\n        <ListGroup className=\"list-group-flush list my--3\">\n          {teamMembers.map((tm) => (\n            <TeamMember key={`team-member-${tm.id}`} {...tm} />\n          ))}\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const ProgressTrackWidget = ({\n  data,\n  titleProgress = \"Progress track\",\n}) => {\n  const Progress = (props) => {\n    const {\n      title,\n      percentage,\n      color,\n      last = false,\n      countCorrect,\n      total,\n    } = props;\n    const extraClassName = last ? \"\" : \"mb-2\";\n\n    return (\n      <Row className={`align-items-center ${extraClassName}`}>\n        {/* <Col xs=\"auto\">\n          <span className={`icon icon-md text-${color}`}>\n            <FontAwesomeIcon icon={icon} className=\"me-1\" />\n          </span>\n        </Col> */}\n        <Col>\n          <div className=\"progress-wrapper\">\n            <div className=\"progress-info\">\n              <h6 className=\"mb-0\">{title}</h6>\n              <span>\n                {countCorrect} correct / {total} questions\n              </span>\n            </div>\n            <ProgressAntd\n              strokeColor={{\n                \"0%\": color,\n                \"100%\": color,\n              }}\n              percent={percentage}\n            />\n          </div>\n        </Col>\n      </Row>\n    );\n  };\n\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Header className=\"border-bottom border-light\">\n        <h5 className=\"mb-0\">{titleProgress}</h5>\n      </Card.Header>\n      <Card.Body>\n        {data?.map((item) => (\n          <Progress key={item.title + \"progress\"} {...item} />\n        ))}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const RankingWidget = () => {\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Body>\n        <div className=\"d-flex align-items-center justify-content-between border-bottom border-light pb-3\">\n          <div>\n            <h6>\n              <FontAwesomeIcon\n                icon={faGlobeEurope}\n                className=\"icon icon-xs me-3\"\n              />{\" \"}\n              Global Rank\n            </h6>\n          </div>\n          <div>\n            <Card.Link href=\"#\" className=\"text-primary fw-bold\">\n              #755 <FontAwesomeIcon icon={faChartLine} className=\"ms-2\" />\n            </Card.Link>\n          </div>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-between border-bottom border-light py-3\">\n          <div>\n            <h6 className=\"mb-0\">\n              <FontAwesomeIcon icon={faFlagUsa} className=\"icon icon-xs me-3\" />\n              Country Rank\n            </h6>\n            <div className=\"small card-stats\">\n              United States{\" \"}\n              <FontAwesomeIcon\n                icon={faAngleUp}\n                className=\"icon icon-xs text-success ms-2\"\n              />\n            </div>\n          </div>\n          <div>\n            <Card.Link href=\"#top\" className=\"text-primary fw-bold\">\n              #32 <FontAwesomeIcon icon={faChartLine} className=\"ms-2\" />\n            </Card.Link>\n          </div>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-between pt-3\">\n          <div>\n            <h6 className=\"mb-0\">\n              <FontAwesomeIcon\n                icon={faFolderOpen}\n                className=\"icon icon-xs me-3\"\n              />\n              Category Rank\n            </h6>\n            <Card.Link href=\"#top\" className=\"small card-stats\">\n              Travel &gt; Accomodation\n            </Card.Link>\n          </div>\n          <div>\n            <Card.Link href=\"#top\" className=\"text-primary fw-bold\">\n              #16 <FontAwesomeIcon icon={faChartLine} className=\"ms-2\" />\n            </Card.Link>\n          </div>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const SalesValueWidget = (props) => {\n  const { title, value, percentage } = props;\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\n\n  return (\n    <Card className=\"bg-secondary-alt shadow-sm\">\n      <Card.Header className=\"d-flex flex-row align-items-center flex-0\">\n        <div className=\"d-block\">\n          <h5 className=\"fw-normal mb-2\">{title}</h5>\n          <h3>${value}</h3>\n          <small className=\"fw-bold mt-2\">\n            <span className=\"me-2\">Yesterday</span>\n            <FontAwesomeIcon\n              icon={percentageIcon}\n              className={`${percentageColor} me-1`}\n            />\n            <span className={percentageColor}>{percentage}%</span>\n          </small>\n        </div>\n        <div className=\"d-flex ms-auto\">\n          <Button variant=\"secondary\" size=\"sm\" className=\"me-2\">\n            Month\n          </Button>\n          <Button variant=\"primary\" size=\"sm\" className=\"me-3\">\n            Week\n          </Button>\n        </div>\n      </Card.Header>\n      <Card.Body className=\"p-2\">\n        <SalesValueChart />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const SalesValueWidgetPhone = (props) => {\n  const { title, value, percentage } = props;\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\n\n  return (\n    <Card className=\"bg-secondary-alt shadow-sm\">\n      <Card.Header className=\"d-md-flex flex-row align-items-center flex-0\">\n        <div className=\"d-block mb-3 mb-md-0\">\n          <h5 className=\"fw-normal mb-2\">{title}</h5>\n          <h3>${value}</h3>\n          <small className=\"fw-bold mt-2\">\n            <span className=\"me-2\">Yesterday</span>\n            <FontAwesomeIcon\n              icon={percentageIcon}\n              className={`${percentageColor} me-1`}\n            />\n            <span className={percentageColor}>{percentage}%</span>\n          </small>\n        </div>\n        <div className=\"d-flex ms-auto\">\n          <Button variant=\"secondary\" size=\"sm\" className=\"me-2\">\n            Month\n          </Button>\n          <Button variant=\"primary\" size=\"sm\" className=\"me-3\">\n            Week\n          </Button>\n        </div>\n      </Card.Header>\n      <Card.Body className=\"p-2\">\n        <SalesValueChartphone />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const AcquisitionWidget = () => {\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Body>\n        <h5>Acquisition</h5>\n        <p>\n          Tells you where your visitors originated from, such as search engines,\n          social networks or website referrals.\n        </p>\n        <div className=\"d-block\">\n          <div className=\"d-flex align-items-center pt-3 me-5\">\n            <div className=\"icon icon-shape icon-sm icon-shape-danger rounded me-3\">\n              <FontAwesomeIcon icon={faChartBar} />\n            </div>\n            <div className=\"d-block\">\n              <label className=\"mb-0\">Bounce Rate</label>\n              <h4 className=\"mb-0\">33.50%</h4>\n            </div>\n          </div>\n          <div className=\"d-flex align-items-center pt-3\">\n            <div className=\"icon icon-shape icon-sm icon-shape-quaternary rounded me-3\">\n              <FontAwesomeIcon icon={faChartArea} />\n            </div>\n            <div className=\"d-block\">\n              <label className=\"mb-0\">Sessions</label>\n              <h4 className=\"mb-0\">9,567</h4>\n            </div>\n          </div>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n","\nimport { faCalendarCheck, faComment } from '@fortawesome/free-solid-svg-icons';\n\nimport Profile1 from \"../assets/img/team/profile-picture-1.jpg\"\nimport Profile2 from \"../assets/img/team/profile-picture-2.jpg\"\nimport Profile3 from \"../assets/img/team/profile-picture-3.jpg\"\nimport Profile4 from \"../assets/img/team/profile-picture-4.jpg\"\n\nexport default [\n    {\n        \"id\": 1,\n        \"image\": Profile1,\n        \"name\": \"Christopher Wood\",\n        \"statusKey\": \"online\",\n        \"icon\": faCalendarCheck,\n        \"btnText\": \"Invite\"\n    },\n    {\n        \"id\": 2,\n        \"image\": Profile2,\n        \"name\": \"Jose Leos\",\n        \"statusKey\": \"inMeeting\",\n        \"icon\": faComment,\n        \"btnText\": \"Message\"\n    },\n    {\n        \"id\": 3,\n        \"image\": Profile3,\n        \"name\": \"Bonnie Green\",\n        \"statusKey\": \"offline\",\n        \"icon\": faCalendarCheck,\n        \"btnText\": \"Invite\"\n    },\n    {\n        \"id\": 4,\n        \"image\": Profile4,\n        \"name\": \"Neil Sims\",\n        \"statusKey\": \"online\",\n        \"icon\": faComment,\n        \"btnText\": \"Message\"\n    }\n]","export const groupBy = function (xs, key) {\n  return xs.reduce(function (rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x);\n    return rv;\n  }, {});\n};\n\nexport const countAnswerRatePerTopic = (dataParams, topic, submissions) => {\n  if (\n    dataParams !== undefined &&\n    topic.length !== 0 &&\n    submissions !== undefined\n  ) {\n    const groupByIDTopic = groupBy(dataParams, \"topic\");\n    let groupQuestionByTopic = {\n      labels: Object.keys(groupByIDTopic).map(\n        (item) => topic.find((t) => t._id === item)?.title\n      ),\n      series: Object.entries(groupByIDTopic).map((item) => item),\n    };\n\n    let result = groupQuestionByTopic.series.map((item, index) => {\n      let countCorrect = 0;\n      item[1].map((t) => {\n        const tempArray = submissions.find((u) => t._id === u.question_id);\n        if (tempArray !== undefined && tempArray.correct) {\n          countCorrect++;\n        }\n      });\n      return {\n        title: groupQuestionByTopic.labels[index],\n        percentage: ((parseInt(countCorrect) / item[1].length) * 100).toFixed(\n          0\n        ),\n        total: item[1].length,\n        countCorrect: countCorrect,\n        color: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n        last: index === groupQuestionByTopic.series.length - 1 ? true : false,\n      };\n    });\n    return result;\n  }\n  return [];\n};\n\nexport const countPercentTopicInExam = (dataParams, topic) => {\n  if (dataParams !== undefined && topic.length !== 0) {\n    const groupByIDTopic = groupBy(dataParams, \"topic\");\n\n    return {\n      labels: Object.keys(groupByIDTopic).map(\n        (item) => topic.find((t) => t._id === item)?.title\n      ),\n      series: Object.entries(groupByIDTopic).map((item) =>\n        parseInt(item[1].length)\n      ),\n    };\n  }\n  return {\n    labels: [\"Empty\"],\n    series: [100],\n  };\n};\n\nexport const countPercentAnswerRate = (dataParams, submissions) => {\n  if (dataParams !== undefined && submissions !== undefined) {\n    const temp = [...submissions].map((item) => {\n      const tempArray = dataParams.find((t) => item._id === t.question_id);\n      if (item?.answers === \"\") {\n        return {\n          ...tempArray,\n          result: \"No Answer\",\n        };\n      } else {\n        if (item.correct) {\n          return {\n            ...tempArray,\n            result: \"Correct\",\n          };\n        } else {\n          return {\n            ...tempArray,\n            result: \"Incorrect\",\n          };\n        }\n      }\n    });\n    const groupByResult = groupBy(temp, \"result\");\n\n    return {\n      labels: Object.keys(groupByResult),\n      series: Object.entries(groupByResult).map((item) =>\n        parseInt(item[1].length)\n      ),\n    };\n  }\n  return {\n    labels: [\"Empty\"],\n    series: [100],\n  };\n};\n\n\nexport const getTimeAndPercentCorrectByID = (historyExam, resultNextTest) => {\n  if (historyExam !== undefined) {\n    let result = [...historyExam].map((item) => {\n      let count = [...item?.newSubmissions]?.filter(\n        (item) => item.correct === true\n      ).length;\n      let total = [...item?.newSubmissions].length;\n      return {\n        count: count,\n        total: total,\n        percentage: ((count / total) * 100).toFixed(2),\n        time: new Date(item?.result?.createdAt).toLocaleString(),\n      };\n    });\n    let totalCorrect = 0;\n    let totalSubmission = 0;\n    result.map((item) => {\n      totalCorrect += item.count;\n      totalSubmission += item.total;\n    });\n    const average = ((totalCorrect / totalSubmission) * 100).toFixed(2);\n\n    if (resultNextTest !== undefined) {\n      result.push({\n        count: 0,\n        total: 0,\n        percentage: resultNextTest,\n        time: new Date().toLocaleString(),\n      });\n    }\n\n    return {\n      annotations: {\n        yaxis: [\n          {\n            y: average,\n            borderColor: \"#00E396\",\n            offsetY: 20,\n            label: {\n              borderColor: \"#00E396\",\n              style: {\n                color: \"#fff\",\n                background: \"#00E396\",\n              },\n              text: `Average: ${average}`,\n            },\n          },\n        ],\n        points: [\n          resultNextTest !== undefined && {\n            x: new Date().toLocaleString(),\n            y: resultNextTest,\n            marker: {\n              size: 8,\n              fillColor: \"#fff\",\n              strokeColor: \"red\",\n              radius: 2,\n              cssClass: \"apexcharts-custom-class\",\n            },\n            label: {\n              borderColor: \"#FF4560\",\n              offsetY: 0,\n              style: {\n                color: \"#fff\",\n                background: \"#FF4560\",\n              },\n\n              text: `Result Prediction: ${resultNextTest}`,\n            },\n          },\n        ],\n      },\n      xaxis: {\n        categories: [...result].map((item) => item.time).slice(-5),\n        title: {\n          text: \"Time to test\",\n        },\n      },\n      yaxis: {\n        title: {\n          text: \"Percentage of Correct Answer\",\n        },\n        min: 0,\n        max: 100,\n      },\n      series: [\n        {\n          name: \"Chart Line of correct answer\",\n          data: [...result].map((item) => item.percentage).slice(-5),\n        },\n      ],\n    };\n  }\n  return [];\n};\n"],"names":["LineChart","series","title","xaxis","yaxis","annotations","id","options","chart","height","type","dropShadow","enabled","color","top","left","blur","opacity","toolbar","show","autoSelected","colors","dataLabels","stroke","curve","text","align","grid","borderColor","row","markers","size","legend","position","horizontalAlign","floating","offsetY","offsetX","labels","width","className","faTruckMonster","responsive","breakpoint","CounterWidget","faCalendarCheck","faComment","props","icon","iconColor","category","percentage","period","faAngleDown","faAngleUp","border","xl","xs","ProgressTrackWidget","data","titleProgress","Progress","last","countCorrect","total","extraClassName","strokeColor","percent","map","item","groupBy","key","reduce","rv","x","push","countAnswerRatePerTopic","dataParams","topic","submissions","undefined","length","groupByIDTopic","groupQuestionByTopic","Object","keys","find","t","_id","entries","index","tempArray","u","question_id","correct","parseInt","toFixed","Math","floor","random","toString","countPercentTopicInExam","countPercentAnswerRate","temp","answers","result","groupByResult","getTimeAndPercentCorrectByID","historyExam","resultNextTest","count","newSubmissions","filter","time","Date","createdAt","toLocaleString","totalCorrect","totalSubmission","average","y","label","style","background","points","marker","fillColor","radius","cssClass","categories","slice","min","max","name"],"sourceRoot":""}