{"version":3,"file":"static/js/822.cc38b0c8.chunk.js","mappings":"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","sources":["app/components/Chart/Chart.js","app/components/Widgets.js","app/data/teamMembers.js","app/utils/ArrayUtils.js"],"sourcesContent":["import { faTruckMonster } from \"@fortawesome/free-solid-svg-icons\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\n\r\nconst Chart = ({ series, labels, width }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"chart-wrap\">\r\n        <div id=\"chart\">\r\n          <ReactApexChart\r\n            className=\"chart-container\"\r\n            options={{\r\n              chart: {\r\n                width: width,\r\n                type: \"donut\",\r\n              },\r\n              labels: labels,\r\n              dataLabels: {\r\n                enabled: faTruckMonster,\r\n              },\r\n              responsive: [\r\n                {\r\n                  breakpoint: 480,\r\n                  options: {\r\n                    chart: {\r\n                      width: 200,\r\n                    },\r\n                    legend: {\r\n                      show: true,\r\n                    },\r\n                  },\r\n                },\r\n              ],\r\n              legend: {\r\n                position: \"right\",\r\n                offsetY: 0,\r\n                height: 230,\r\n              },\r\n            }}\r\n            series={series}\r\n            type=\"donut\"\r\n            width={width}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const LineChart = ({ series, title, xaxis, yaxis, annotations }) => {\r\n  return (\r\n    <div id=\"chart\">\r\n      <ReactApexChart\r\n        options={{\r\n          chart: {\r\n            height: 350,\r\n            type: \"line\",\r\n            dropShadow: {\r\n              enabled: true,\r\n              color: \"#000\",\r\n              top: 18,\r\n              left: 7,\r\n              blur: 10,\r\n              opacity: 0.2,\r\n            },\r\n            toolbar: {\r\n              show: true,\r\n              autoSelected: \"zoom\",\r\n            },\r\n          },\r\n          colors: [\"#77B6EA\", \"#545454\"],\r\n          dataLabels: {\r\n            enabled: false,\r\n          },\r\n          stroke: {\r\n            curve: \"smooth\",\r\n          },\r\n          title: {\r\n            text: title,\r\n            align: \"left\",\r\n          },\r\n          grid: {\r\n            borderColor: \"#e7e7e7\",\r\n            row: {\r\n              colors: [\"#f3f3f3\", \"transparent\"], // takes an array which will be repeated on columns\r\n              opacity: 0.5,\r\n            },\r\n          },\r\n          annotations: annotations,\r\n          markers: {\r\n            size: 1,\r\n          },\r\n          xaxis: xaxis,\r\n          yaxis: yaxis,\r\n          legend: {\r\n            position: \"top\",\r\n            horizontalAlign: \"right\",\r\n            floating: true,\r\n            offsetY: -25,\r\n            offsetX: -5,\r\n          },\r\n        }}\r\n        series={series}\r\n        type=\"line\"\r\n        height={350}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faAngleDown,\r\n  faAngleUp,\r\n  faChartArea,\r\n  faChartBar,\r\n  faChartLine,\r\n  faFlagUsa,\r\n  faFolderOpen,\r\n  faGlobeEurope,\r\n  faPaperclip,\r\n  faUserPlus,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n  faAngular,\r\n  faBootstrap,\r\n  faReact,\r\n  faVuejs,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport {\r\n  Col,\r\n  Row,\r\n  Card,\r\n  Image,\r\n  Button,\r\n  ListGroup,\r\n  ProgressBar,\r\n} from \"@themesberg/react-bootstrap\";\r\nimport { Progress as ProgressAntd } from \"antd\";\r\nimport {\r\n  CircleChart,\r\n  BarChart,\r\n  SalesValueChart,\r\n  SalesValueChartphone,\r\n} from \"./Charts\";\r\n\r\nimport Profile1 from \"../assets/img/team/profile-picture-1.jpg\";\r\nimport ProfileCover from \"../assets/img/profile-cover.jpg\";\r\n\r\nimport teamMembers from \"../data/teamMembers\";\r\n\r\nexport const ProfileCardWidget = () => {\r\n  return (\r\n    <Card border=\"light\" className=\"text-center p-0 mb-4\">\r\n      <div\r\n        style={{ backgroundImage: `url(${ProfileCover})` }}\r\n        className=\"profile-cover rounded-top\"\r\n      />\r\n      <Card.Body className=\"pb-5\">\r\n        <Card.Img\r\n          src={Profile1}\r\n          alt=\"Neil Portrait\"\r\n          className=\"user-avatar large-avatar rounded-circle mx-auto mt-n7 mb-4\"\r\n        />\r\n        <Card.Title>Neil Sims</Card.Title>\r\n        <Card.Subtitle className=\"fw-normal\">\r\n          Senior Software Engineer\r\n        </Card.Subtitle>\r\n        <Card.Text className=\"text-gray mb-4\">New York, USA</Card.Text>\r\n\r\n        <Button variant=\"primary\" size=\"sm\" className=\"me-2\">\r\n          <FontAwesomeIcon icon={faUserPlus} className=\"me-1\" /> Connect\r\n        </Button>\r\n        <Button variant=\"secondary\" size=\"sm\">\r\n          Send Message\r\n        </Button>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const ChoosePhotoWidget = (props) => {\r\n  const { title, photo } = props;\r\n\r\n  return (\r\n    <Card border=\"light\" className=\"bg-white shadow-sm mb-4\">\r\n      <Card.Body>\r\n        <h5 className=\"mb-4\">{title}</h5>\r\n        <div className=\"d-xl-flex align-items-center\">\r\n          <div className=\"user-avatar xl-avatar\">\r\n            <Image fluid rounded src={photo} />\r\n          </div>\r\n          <div className=\"file-field\">\r\n            <div className=\"d-flex justify-content-xl-center ms-xl-3\">\r\n              <div className=\"d-flex\">\r\n                <span className=\"icon icon-md\">\r\n                  <FontAwesomeIcon icon={faPaperclip} className=\"me-3\" />\r\n                </span>\r\n                <input type=\"file\" />\r\n                <div className=\"d-md-block text-start\">\r\n                  <div className=\"fw-normal text-dark mb-1\">Choose Image</div>\r\n                  <div className=\"text-gray small\">\r\n                    JPG, GIF or PNG. Max size of 800K\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const CounterWidget = (props) => {\r\n  const { icon, iconColor, category, title, period, percentage } = props;\r\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\r\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\r\n\r\n  return (\r\n    <Card border=\"light\" className=\"shadow-sm\">\r\n      <Card.Body>\r\n        <Row className=\"d-block d-xl-flex align-items-center\">\r\n          <Col\r\n            xl={5}\r\n            className=\"text-xl-center d-flex align-items-center justify-content-xl-center mb-3 mb-xl-0\"\r\n          >\r\n            <div\r\n              className={`icon icon-shape icon-md icon-${iconColor} rounded me-4 me-sm-0`}\r\n            >\r\n              <FontAwesomeIcon icon={icon} />\r\n            </div>\r\n            <div className=\"d-sm-none\">\r\n              <h5>{category}</h5>\r\n              <h3 className=\"mb-1\">{title}</h3>\r\n            </div>\r\n          </Col>\r\n          <Col xs={12} xl={7} className=\"px-xl-0\">\r\n            <div className=\"d-none d-sm-block\">\r\n              <h5>{category}</h5>\r\n              <h3 className=\"mb-1\">{title}</h3>\r\n            </div>\r\n            {/* <small>\r\n              {period}, <FontAwesomeIcon icon={faGlobeEurope} size=\"xs\" />{\" \"}\r\n              WorldWide\r\n            </small> */}\r\n            {/* <div className=\"small mt-2\">\r\n              <FontAwesomeIcon\r\n                icon={percentageIcon}\r\n                className={`${percentageColor} me-1`}\r\n              />\r\n              <span className={`${percentageColor} fw-bold`}>\r\n                {percentage}%\r\n              </span>{\" \"}\r\n              Since last month\r\n            </div> */}\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const CircleChartWidget = (props) => {\r\n  const { title, data = [] } = props;\r\n  const series = data.map((d) => ({\r\n    value: d.value,\r\n    meta: d.label,\r\n  }));\r\n\r\n  return (\r\n    <Card border=\"light\" className=\"shadow-sm\">\r\n      <Card.Body>\r\n        <Row className=\"d-block d-xl-flex align-items-center\">\r\n          <Col\r\n            xs={12}\r\n            xl={5}\r\n            className=\"text-xl-center d-flex align-items-center justify-content-xl-center mb-3 mb-xl-0\"\r\n          >\r\n            <CircleChart series={series} />\r\n          </Col>\r\n          <Col xs={12} xl={7} className=\"px-xl-0\">\r\n            <h5 className=\"mb-3\">{title}</h5>\r\n\r\n            {data.map((d) => (\r\n              <div>\r\n                {/* <div style={{ width: '30px', height: '30px', backgroundColor: d.color}}></div> */}\r\n                <h6\r\n                  key={`circle-element-${d.id}`}\r\n                  className=\"fw-normal text-gray\"\r\n                >\r\n                  <FontAwesomeIcon\r\n                    icon={d.icon}\r\n                    className={`icon icon-xs text-${d.color} w-20 me-1`}\r\n                  />\r\n                  {` ${d.label} `}\r\n                  {`${d.value}%`}\r\n                </h6>\r\n              </div>\r\n            ))}\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const BarChartWidget = (props) => {\r\n  const { title, value, percentage, data = [] } = props;\r\n  const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n  const series = data.map((d) => d.value);\r\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\r\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\r\n\r\n  return (\r\n    <Card border=\"light\" className=\"shadow-sm\">\r\n      <Card.Body className=\"d-flex flex-row align-items-center flex-0 border-bottom\">\r\n        <div className=\"d-block\">\r\n          <h6 className=\"fw-normal text-gray mb-2\">{title}</h6>\r\n          <h3>{value}</h3>\r\n          <small className=\"mt-2\">\r\n            <FontAwesomeIcon\r\n              icon={percentageIcon}\r\n              className={`${percentageColor} me-1`}\r\n            />\r\n            <span className={`${percentageColor} fw-bold`}>{percentage}%</span>\r\n          </small>\r\n        </div>\r\n        <div className=\"d-block ms-auto\">\r\n          {data.map((d) => (\r\n            <div\r\n              key={`bar-element-${d.id}`}\r\n              className=\"d-flex align-items-center text-end mb-2\"\r\n            >\r\n              <span className={`shape-xs rounded-circle bg-${d.color} me-2`} />\r\n              <small className=\"fw-normal\">{d.label}</small>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Card.Body>\r\n      <Card.Body className=\"p-2\">\r\n        <BarChart labels={labels} series={series} />\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const TeamMembersWidget = () => {\r\n  const TeamMember = (props) => {\r\n    const { name, statusKey, image, icon, btnText } = props;\r\n    const status = {\r\n      online: { color: \"success\", label: \"Online\" },\r\n      inMeeting: { color: \"warning\", label: \"In a meeting\" },\r\n      offline: { color: \"danger\", label: \"Offline\" },\r\n    };\r\n\r\n    const statusColor = status[statusKey] ? status[statusKey].color : \"danger\",\r\n      statusLabel = status[statusKey] ? status[statusKey].label : \"Offline\";\r\n\r\n    return (\r\n      <ListGroup.Item className=\"px-0\">\r\n        <Row className=\"align-items-center\">\r\n          <Col className=\"col-auto\">\r\n            <a href=\"#top\" className=\"user-avatar\">\r\n              <Image src={image} className=\"rounded-circle\" />\r\n            </a>\r\n          </Col>\r\n          <Col className=\"ms--2\">\r\n            <h4 className=\"h6 mb-0\">\r\n              <a href=\"#!\">{name}</a>\r\n            </h4>\r\n            <span className={`text-${statusColor}`}>● </span>\r\n            <small>{statusLabel}</small>\r\n          </Col>\r\n          <Col className=\"col-auto\">\r\n            <Button variant=\"tertiary\" size=\"sm\">\r\n              <FontAwesomeIcon icon={icon} className=\"me-1\" /> {btnText}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </ListGroup.Item>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card border=\"light\" className=\"shadow-sm\">\r\n      <Card.Header className=\"border-bottom border-light d-flex justify-content-between\">\r\n        <h5 className=\"mb-0\">Team members</h5>\r\n        <Button variant=\"secondary\" size=\"sm\">\r\n          See all\r\n        </Button>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <ListGroup className=\"list-group-flush list my--3\">\r\n          {teamMembers.map((tm) => (\r\n            <TeamMember key={`team-member-${tm.id}`} {...tm} />\r\n          ))}\r\n        </ListGroup>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const ProgressTrackWidget = ({\r\n  data,\r\n  titleProgress = \"Progress track\",\r\n}) => {\r\n  const Progress = (props) => {\r\n    const {\r\n      title,\r\n      percentage,\r\n      color,\r\n      last = false,\r\n      countCorrect,\r\n      total,\r\n    } = props;\r\n    const extraClassName = last ? \"\" : \"mb-2\";\r\n\r\n    return (\r\n      <Row className={`align-items-center ${extraClassName}`}>\r\n        {/* <Col xs=\"auto\">\r\n          <span className={`icon icon-md text-${color}`}>\r\n            <FontAwesomeIcon icon={icon} className=\"me-1\" />\r\n          </span>\r\n        </Col> */}\r\n        <Col>\r\n          <div className=\"progress-wrapper\">\r\n            <div className=\"progress-info\">\r\n              <h6 className=\"mb-0\">{title}</h6>\r\n              <span>\r\n                {countCorrect} correct / {total} questions\r\n              </span>\r\n            </div>\r\n            <ProgressAntd\r\n              strokeColor={{\r\n                \"0%\": color,\r\n                \"100%\": color,\r\n              }}\r\n              percent={percentage}\r\n            />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card border=\"light\" className=\"shadow-sm\">\r\n      <Card.Header className=\"border-bottom border-light\">\r\n        <h5 className=\"mb-0\">{titleProgress}</h5>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        {data?.map((item) => (\r\n          <Progress key={item.title + \"progress\"} {...item} />\r\n        ))}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const RankingWidget = () => {\r\n  return (\r\n    <Card border=\"light\" className=\"shadow-sm\">\r\n      <Card.Body>\r\n        <div className=\"d-flex align-items-center justify-content-between border-bottom border-light pb-3\">\r\n          <div>\r\n            <h6>\r\n              <FontAwesomeIcon\r\n                icon={faGlobeEurope}\r\n                className=\"icon icon-xs me-3\"\r\n              />{\" \"}\r\n              Global Rank\r\n            </h6>\r\n          </div>\r\n          <div>\r\n            <Card.Link href=\"#\" className=\"text-primary fw-bold\">\r\n              #755 <FontAwesomeIcon icon={faChartLine} className=\"ms-2\" />\r\n            </Card.Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex align-items-center justify-content-between border-bottom border-light py-3\">\r\n          <div>\r\n            <h6 className=\"mb-0\">\r\n              <FontAwesomeIcon icon={faFlagUsa} className=\"icon icon-xs me-3\" />\r\n              Country Rank\r\n            </h6>\r\n            <div className=\"small card-stats\">\r\n              United States{\" \"}\r\n              <FontAwesomeIcon\r\n                icon={faAngleUp}\r\n                className=\"icon icon-xs text-success ms-2\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <Card.Link href=\"#top\" className=\"text-primary fw-bold\">\r\n              #32 <FontAwesomeIcon icon={faChartLine} className=\"ms-2\" />\r\n            </Card.Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex align-items-center justify-content-between pt-3\">\r\n          <div>\r\n            <h6 className=\"mb-0\">\r\n              <FontAwesomeIcon\r\n                icon={faFolderOpen}\r\n                className=\"icon icon-xs me-3\"\r\n              />\r\n              Category Rank\r\n            </h6>\r\n            <Card.Link href=\"#top\" className=\"small card-stats\">\r\n              Travel &gt; Accomodation\r\n            </Card.Link>\r\n          </div>\r\n          <div>\r\n            <Card.Link href=\"#top\" className=\"text-primary fw-bold\">\r\n              #16 <FontAwesomeIcon icon={faChartLine} className=\"ms-2\" />\r\n            </Card.Link>\r\n          </div>\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const SalesValueWidget = (props) => {\r\n  const { title, value, percentage } = props;\r\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\r\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\r\n\r\n  return (\r\n    <Card className=\"bg-secondary-alt shadow-sm\">\r\n      <Card.Header className=\"d-flex flex-row align-items-center flex-0\">\r\n        <div className=\"d-block\">\r\n          <h5 className=\"fw-normal mb-2\">{title}</h5>\r\n          <h3>${value}</h3>\r\n          <small className=\"fw-bold mt-2\">\r\n            <span className=\"me-2\">Yesterday</span>\r\n            <FontAwesomeIcon\r\n              icon={percentageIcon}\r\n              className={`${percentageColor} me-1`}\r\n            />\r\n            <span className={percentageColor}>{percentage}%</span>\r\n          </small>\r\n        </div>\r\n        <div className=\"d-flex ms-auto\">\r\n          <Button variant=\"secondary\" size=\"sm\" className=\"me-2\">\r\n            Month\r\n          </Button>\r\n          <Button variant=\"primary\" size=\"sm\" className=\"me-3\">\r\n            Week\r\n          </Button>\r\n        </div>\r\n      </Card.Header>\r\n      <Card.Body className=\"p-2\">\r\n        <SalesValueChart />\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const SalesValueWidgetPhone = (props) => {\r\n  const { title, value, percentage } = props;\r\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\r\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\r\n\r\n  return (\r\n    <Card className=\"bg-secondary-alt shadow-sm\">\r\n      <Card.Header className=\"d-md-flex flex-row align-items-center flex-0\">\r\n        <div className=\"d-block mb-3 mb-md-0\">\r\n          <h5 className=\"fw-normal mb-2\">{title}</h5>\r\n          <h3>${value}</h3>\r\n          <small className=\"fw-bold mt-2\">\r\n            <span className=\"me-2\">Yesterday</span>\r\n            <FontAwesomeIcon\r\n              icon={percentageIcon}\r\n              className={`${percentageColor} me-1`}\r\n            />\r\n            <span className={percentageColor}>{percentage}%</span>\r\n          </small>\r\n        </div>\r\n        <div className=\"d-flex ms-auto\">\r\n          <Button variant=\"secondary\" size=\"sm\" className=\"me-2\">\r\n            Month\r\n          </Button>\r\n          <Button variant=\"primary\" size=\"sm\" className=\"me-3\">\r\n            Week\r\n          </Button>\r\n        </div>\r\n      </Card.Header>\r\n      <Card.Body className=\"p-2\">\r\n        <SalesValueChartphone />\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const AcquisitionWidget = () => {\r\n  return (\r\n    <Card border=\"light\" className=\"shadow-sm\">\r\n      <Card.Body>\r\n        <h5>Acquisition</h5>\r\n        <p>\r\n          Tells you where your visitors originated from, such as search engines,\r\n          social networks or website referrals.\r\n        </p>\r\n        <div className=\"d-block\">\r\n          <div className=\"d-flex align-items-center pt-3 me-5\">\r\n            <div className=\"icon icon-shape icon-sm icon-shape-danger rounded me-3\">\r\n              <FontAwesomeIcon icon={faChartBar} />\r\n            </div>\r\n            <div className=\"d-block\">\r\n              <label className=\"mb-0\">Bounce Rate</label>\r\n              <h4 className=\"mb-0\">33.50%</h4>\r\n            </div>\r\n          </div>\r\n          <div className=\"d-flex align-items-center pt-3\">\r\n            <div className=\"icon icon-shape icon-sm icon-shape-quaternary rounded me-3\">\r\n              <FontAwesomeIcon icon={faChartArea} />\r\n            </div>\r\n            <div className=\"d-block\">\r\n              <label className=\"mb-0\">Sessions</label>\r\n              <h4 className=\"mb-0\">9,567</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n","\r\nimport { faCalendarCheck, faComment } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Profile1 from \"../assets/img/team/profile-picture-1.jpg\"\r\nimport Profile2 from \"../assets/img/team/profile-picture-2.jpg\"\r\nimport Profile3 from \"../assets/img/team/profile-picture-3.jpg\"\r\nimport Profile4 from \"../assets/img/team/profile-picture-4.jpg\"\r\n\r\nexport default [\r\n    {\r\n        \"id\": 1,\r\n        \"image\": Profile1,\r\n        \"name\": \"Christopher Wood\",\r\n        \"statusKey\": \"online\",\r\n        \"icon\": faCalendarCheck,\r\n        \"btnText\": \"Invite\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"image\": Profile2,\r\n        \"name\": \"Jose Leos\",\r\n        \"statusKey\": \"inMeeting\",\r\n        \"icon\": faComment,\r\n        \"btnText\": \"Message\"\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"image\": Profile3,\r\n        \"name\": \"Bonnie Green\",\r\n        \"statusKey\": \"offline\",\r\n        \"icon\": faCalendarCheck,\r\n        \"btnText\": \"Invite\"\r\n    },\r\n    {\r\n        \"id\": 4,\r\n        \"image\": Profile4,\r\n        \"name\": \"Neil Sims\",\r\n        \"statusKey\": \"online\",\r\n        \"icon\": faComment,\r\n        \"btnText\": \"Message\"\r\n    }\r\n]","export const groupBy = function (xs, key) {\r\n  return xs.reduce(function (rv, x) {\r\n    (rv[x[key]] = rv[x[key]] || []).push(x);\r\n    return rv;\r\n  }, {});\r\n};\r\n\r\nexport const countAnswerRatePerTopic = (dataParams, topic, submissions) => {\r\n  if (\r\n    dataParams !== undefined &&\r\n    topic.length !== 0 &&\r\n    submissions !== undefined\r\n  ) {\r\n    const groupByIDTopic = groupBy(dataParams, \"topic\");\r\n    let groupQuestionByTopic = {\r\n      labels: Object.keys(groupByIDTopic).map(\r\n        (item) => topic.find((t) => t._id === item)?.title\r\n      ),\r\n      series: Object.entries(groupByIDTopic).map((item) => item),\r\n    };\r\n\r\n    let result = groupQuestionByTopic.series.map((item, index) => {\r\n      let countCorrect = 0;\r\n      item[1].map((t) => {\r\n        const tempArray = submissions.find((u) => t._id === u.question_id);\r\n        if (tempArray !== undefined && tempArray.correct) {\r\n          countCorrect++;\r\n        }\r\n      });\r\n      return {\r\n        title: groupQuestionByTopic.labels[index],\r\n        percentage: ((parseInt(countCorrect) / item[1].length) * 100).toFixed(\r\n          0\r\n        ),\r\n        total: item[1].length,\r\n        countCorrect: countCorrect,\r\n        color: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\r\n        last: index === groupQuestionByTopic.series.length - 1 ? true : false,\r\n      };\r\n    });\r\n    return result;\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const countPercentTopicInExam = (dataParams, topic) => {\r\n  if (dataParams !== undefined && topic.length !== 0) {\r\n    const groupByIDTopic = groupBy(dataParams, \"topic\");\r\n\r\n    return {\r\n      labels: Object.keys(groupByIDTopic).map(\r\n        (item) => topic.find((t) => t._id === item)?.title\r\n      ),\r\n      series: Object.entries(groupByIDTopic).map((item) =>\r\n        parseInt(item[1].length)\r\n      ),\r\n    };\r\n  }\r\n  return {\r\n    labels: [\"Empty\"],\r\n    series: [100],\r\n  };\r\n};\r\n\r\nexport const countPercentAnswerRate = (dataParams, submissions) => {\r\n  if (dataParams !== undefined && submissions !== undefined) {\r\n    const temp = [...submissions].map((item) => {\r\n      const tempArray = dataParams.find((t) => item._id === t.question_id);\r\n      if (item?.answers === \"\") {\r\n        return {\r\n          ...tempArray,\r\n          result: \"No Answer\",\r\n        };\r\n      } else {\r\n        if (item.correct) {\r\n          return {\r\n            ...tempArray,\r\n            result: \"Correct\",\r\n          };\r\n        } else {\r\n          return {\r\n            ...tempArray,\r\n            result: \"Incorrect\",\r\n          };\r\n        }\r\n      }\r\n    });\r\n    const groupByResult = groupBy(temp, \"result\");\r\n\r\n    return {\r\n      labels: Object.keys(groupByResult),\r\n      series: Object.entries(groupByResult).map((item) =>\r\n        parseInt(item[1].length)\r\n      ),\r\n    };\r\n  }\r\n  return {\r\n    labels: [\"Empty\"],\r\n    series: [100],\r\n  };\r\n};\r\n\r\n\r\nexport const getTimeAndPercentCorrectByID = (historyExam, resultNextTest) => {\r\n  if (historyExam !== undefined) {\r\n    let result = [...historyExam].map((item) => {\r\n      let count = [...item?.newSubmissions]?.filter(\r\n        (item) => item.correct === true\r\n      ).length;\r\n      let total = [...item?.newSubmissions].length;\r\n      return {\r\n        count: count,\r\n        total: total,\r\n        percentage: ((count / total) * 100).toFixed(2),\r\n        time: new Date(item?.result?.createdAt).toLocaleString(),\r\n      };\r\n    });\r\n    let totalCorrect = 0;\r\n    let totalSubmission = 0;\r\n    result.map((item) => {\r\n      totalCorrect += item.count;\r\n      totalSubmission += item.total;\r\n    });\r\n    const average = ((totalCorrect / totalSubmission) * 100).toFixed(2);\r\n\r\n    if (resultNextTest !== undefined) {\r\n      result.push({\r\n        count: 0,\r\n        total: 0,\r\n        percentage: resultNextTest,\r\n        time: new Date().toLocaleString(),\r\n      });\r\n    }\r\n\r\n    return {\r\n      annotations: {\r\n        yaxis: [\r\n          {\r\n            y: average,\r\n            borderColor: \"#00E396\",\r\n            offsetY: 20,\r\n            label: {\r\n              borderColor: \"#00E396\",\r\n              style: {\r\n                color: \"#fff\",\r\n                background: \"#00E396\",\r\n              },\r\n              text: `Average: ${average}`,\r\n            },\r\n          },\r\n        ],\r\n        points: [\r\n          resultNextTest !== undefined && {\r\n            x: new Date().toLocaleString(),\r\n            y: resultNextTest,\r\n            marker: {\r\n              size: 8,\r\n              fillColor: \"#fff\",\r\n              strokeColor: \"red\",\r\n              radius: 2,\r\n              cssClass: \"apexcharts-custom-class\",\r\n            },\r\n            label: {\r\n              borderColor: \"#FF4560\",\r\n              offsetY: 0,\r\n              style: {\r\n                color: \"#fff\",\r\n                background: \"#FF4560\",\r\n              },\r\n\r\n              text: `Result Prediction: ${resultNextTest}`,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      xaxis: {\r\n        categories: [...result].map((item) => item.time).slice(-5),\r\n        title: {\r\n          text: \"Time to test\",\r\n        },\r\n      },\r\n      yaxis: {\r\n        title: {\r\n          text: \"Percentage of Correct Answer\",\r\n        },\r\n        min: 0,\r\n        max: 100,\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Chart Line of correct answer\",\r\n          data: [...result].map((item) => item.percentage).slice(-5),\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  return [];\r\n};\r\n"],"names":["LineChart","series","title","xaxis","yaxis","annotations","id","options","chart","height","type","dropShadow","enabled","color","top","left","blur","opacity","toolbar","show","autoSelected","colors","dataLabels","stroke","curve","text","align","grid","borderColor","row","markers","size","legend","position","horizontalAlign","floating","offsetY","offsetX","labels","width","className","faTruckMonster","responsive","breakpoint","CounterWidget","faCalendarCheck","faComment","props","icon","iconColor","category","percentage","period","faAngleDown","faAngleUp","border","xl","xs","ProgressTrackWidget","data","titleProgress","Progress","last","countCorrect","total","extraClassName","strokeColor","percent","map","item","groupBy","key","reduce","rv","x","push","countAnswerRatePerTopic","dataParams","topic","submissions","undefined","length","groupByIDTopic","groupQuestionByTopic","Object","keys","find","t","_id","entries","index","tempArray","u","question_id","correct","parseInt","toFixed","Math","floor","random","toString","countPercentTopicInExam","countPercentAnswerRate","temp","answers","result","groupByResult","getTimeAndPercentCorrectByID","historyExam","resultNextTest","count","newSubmissions","filter","time","Date","createdAt","toLocaleString","totalCorrect","totalSubmission","average","y","label","style","background","points","marker","fillColor","radius","cssClass","categories","slice","min","max","name"],"sourceRoot":""}